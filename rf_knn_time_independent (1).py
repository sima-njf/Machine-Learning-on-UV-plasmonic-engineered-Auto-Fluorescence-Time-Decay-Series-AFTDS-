# -*- coding: utf-8 -*-
"""RF-KNN/time-independent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nlVcLPl5ktAHPER3TPmmBSLBZ5dnP451
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

# === Load and Prepare Data ===
df = pd.read_excel("FLI_vs_Wv.xlsx")  # Make sure this file is in your working directory

samples, labels = [], []
for i, row in df.iterrows():
    wl = row["Wavelength nm."]
    for group, prefix in [("DA", "DA_"), ("DPC", "DPC_"), ("NE", "NE_")]:
        for col in df.columns:
            if col.startswith(prefix) and pd.notna(row[col]):
                samples.append([wl, row[col]])
                labels.append(group)

X = np.array(samples)
y = np.array(labels)

# === Preprocessing ===
X_scaled = MinMaxScaler().fit_transform(X)
y_encoded = LabelEncoder().fit_transform(y)
class_names = LabelEncoder().fit(y).classes_

# === Train/Test Split ===
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y_encoded, test_size=0.25, stratify=y_encoded, random_state=42
)

# === Evaluation Function ===
def evaluate_model(model, name):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    acc = accuracy_score(y_test, y_pred)
    print(f"\n{name} Accuracy: {acc:.2%}")

    report = classification_report(y_test, y_pred, target_names=class_names)
    print("\nClassification Report:\n", report)

    cm = confusion_matrix(y_test, y_pred)
    cm_percent = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis] * 100
    cm_labels = np.array([
        [f"{c}\n({p:.1f}%)" for c, p in zip(row, pct)]
        for row, pct in zip(cm, cm_percent)
    ])

    plt.figure(figsize=(6, 5))
    sns.heatmap(cm_percent, annot=cm_labels, fmt='', cmap="Blues",
                xticklabels=class_names, yticklabels=class_names, cbar_kws={'label': '%'})
    plt.title(f"{name} â€“ Confusion Matrix")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.tight_layout()
    plt.show()

# === Run Models ===
evaluate_model(KNeighborsClassifier(n_neighbors=5), "KNN")
evaluate_model(RandomForestClassifier(n_estimators=100, random_state=42), "Random Forest")